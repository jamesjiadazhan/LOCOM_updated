% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LOCOM_fun.R
\name{locom}
\alias{locom}
\title{A logistic regression model for testing differential abundance in compositional microbiome data (LOCOM)}
\usage{
locom(
  otu.table,
  Y,
  C = NULL,
  fdr.nominal = 0.2,
  seed = NULL,
  prev.cut = 0.2,
  n.perm.max = NULL,
  n.rej.stop = 100,
  n.cores = 4,
  ref.otu = NULL,
  adjustment = "BH"
)
}
\arguments{
\item{otu.table}{the OTU table (or taxa count table) in which the rows correspond to samples and the columns correspond to OTUs (taxa).}

\item{Y}{the trait of interest.}

\item{C}{the other (confounding) covariates to be adjusted.}

\item{fdr.nominal}{the nominal FDR. The default is 0.2.}

\item{seed}{a user-supplied integer seed for the random number generator in the
permutation procedure. The default is NULL, which means that an integer seed will be
generated internally and randomly. In either case, the integer seed will be stored
in the output object in case the user wants to reproduce the permutation replicates.}

\item{prev.cut}{a real value between 0 and 1; taxa with prevalence (percentage of nonzeros) less than prev.cut are excluded. The default is 0.2.}

\item{n.perm.max}{the maximum number of permutations. The default is NULL, in which case \code{n.otu} * \code{n.rej.stop} * (1/\code{fdr.nominal})
is used where \code{n.otu} is the total number of OTUs (that have non-zero counts in at least one sample).}

\item{n.rej.stop}{the minimum number of rejections (i.e., the permutation test
statistic exceeds the observed test statistic) to obtain before stopping the permutation procedure. The
default is 100.}

\item{n.cores}{the number of cores to be used for parallel computing. The default is 1.}

\item{ref.otu}{reference OTU. The default is NULL, which means the most abundant OTU will be chosen as the reference OTU to fit the model.}

\item{adjustment}{method to adjust p-value: Benjamini-Hochberg procedure (BH) or Sandve's adjustment}
}
\value{
A list consisting of
\itemize{
  \item effect.size - effect size at each OTU, i.e., beta_j,1 - median_j'=1,...J(beta_j',1)
  \item p.otu - p-values for OTU-specific tests
  \item q.otu - q-values (adjusted p-values by the BH procedure) for OTU-specific tests
  \item detected.otu - detected OTUs (using the column names of the OTU table) at the nominal FDR
  \item p.global - p-value for the global test
  \item n.perm.completed - number of permutations completed
  \item seed - the seed used to generate the permutation replicates
}
}
\description{
This function allows you to test
(1). whether any OTU (or taxon) is associated with the trait of interest with FDR control, based on the log ratio of relative abundances between pairs of taxa, and
(2). whehter the whole community is associated with the trait (a global test).
The tests accommodate both continuous and discrete (binary) traits and allows adjustment of confounders.
}
\details{
This function uses a sequential stopping criterion (similar to that of Sandve et al. 2011) for the permutation procedure,
which stops when all taxon-level tests have either reached the pre-specified
number (default 100) of rejections or yielded a q-value (by the Benjamini-Hochberg [BH] procedure) that is below the
nominal FDR level (default 0.2). The permutation procedure is always terminated if a pre-specified maximum number (see description of \code{n.perm.max}) of
permutations have been generated. The global test is based on all permutation replicates when the procedure stops/terminates.
}
\examples{
# loading data

data("throat.otu.table")
data("throat.meta")
data("throat.otu.taxonomy")

otu.table <- data.matrix(throat.otu.table)

Y <- ifelse(throat.meta$SmokingStatus == "NonSmoker", 0, 1)
C <- data.matrix(model.matrix(Y ~ throat.meta$Sex + throat.meta$AntibioticUsePast3Months_TimeFromAntibioticUsage - 1))[, -1]

# filtering out three samples with antibiotic use

filter.out.sam <- which(C[, 3] == 0)
otu.table.filter <- otu.table[-filter.out.sam,]
Y <- Y[-filter.out.sam]
C <- C[-filter.out.sam,]

# filtering out rare OTUs

prop.presence.thresh <- 0.2
prop.presence <- colMeans(otu.table.filter > 0)
filter.out.otu <- which(prop.presence < prop.presence.thresh)
if (length(filter.out.otu) > 0) {
    otu.table.filter <- otu.table.filter[, -filter.out.otu]
    prop.presence <- prop.presence[-filter.out.otu]
}

# running locom

res <- locom(otu.table = otu.table.filter, Y = Y, C = C[, 1], fdr.nominal = 0.1, seed = 1, adjustment = "Sandev", n.cores = 4)

# summarizing results
# ordering the detected OTUs by their p-values. If no OTU is detected, we can still provide a summary table for
# the top (e.g., 10) OTUs by re-defining o = order(res$p.otu)[1:10]

w <- match(res$detected.otu, colnames(res$p.otu))
o <- w[order(res$p.otu[w])]

summary.table <- data.frame(otu.name = colnames(res$p.otu)[o],
                  mean.freq = colMeans(otu.table.filter/rowSums(otu.table.filter))[o],
                  prop.presence = prop.presence[o],
                  p.value = signif(res$p.otu[o], 3),
                  q.value = signif(res$q.otu[o], 3),
                  effect.size = signif(res$effect.size[o], 3),
                  otu.tax = throat.otu.taxonomy[as.numeric(colnames(res$p.otu)[o]) + 1],
                  row.names = NULL)
summary.table
}
